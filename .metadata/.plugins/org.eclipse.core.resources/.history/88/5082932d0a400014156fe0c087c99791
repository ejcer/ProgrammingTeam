import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;


/**
 * Codeforces.com 
 * Round 267
 * Division 2
 * Problem B
 * @author Edward McEnrue
 */
public class CF267_Fedor_and_New_Game {

	public static void main(String[] args) {
		MyScanner in = new MyScanner();
		int n = in.nextInt(); //n types of soldiers 0 - (n-1)
		int m = in.nextInt(); //m+1 players in total 1 - (m+1)
		int k = in.nextInt(); //can be friends if differ in at most k bits
		
		int[] p = new int[m]; // player army #s
		for(int i = 0; i < m-1; i++)
		{
			p[i] = in.nextInt();
		}
		
		int fed = in.nextInt();
		String fedB = Integer.toBinaryString(fed);
		
		System.out.println(fed);
		
		int ans = 0;
		for(int i = 0; i < m-1; i++)
		{
			int dcount = 0;
			String pb = Integer.toBinaryString(p[i]);
			int dif = Math.max(pb.length(), fedB.length()) - Math.min(pb.length(), fedB.length());
			for(int j = 0; j < Math.min(pb.length(), fedB.length()); j++)
			{
				if(pb.charAt(j) != fedB.charAt(j))
				{
					dcount++;
				}
			}
			dcount+=dif;
			//binary numbers only differ by at most k bits
			if(dcount <= k)
			{
				ans++;
			}
		}
//		System.out.println(ans);

	}

	// -----------MyScanner class for faster input----------
	public static class MyScanner {
		BufferedReader br;
		StringTokenizer st;

		public MyScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}

	}
	// --------------------------------------------------------
}
