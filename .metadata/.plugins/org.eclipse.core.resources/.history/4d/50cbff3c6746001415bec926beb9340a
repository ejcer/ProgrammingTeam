import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;

import org.omg.PortableServer.POAManagerPackage.State;

import Utilities.IO_Template.MyScanner;


/**
 * vjudge.com 
 * TeamRound 2
 * Division 2
 * Problem C
 * @author Edward McEnrue
 */
public class Dungeon_Master {
	
	static char[][][] cube;
	static int l;
	static int r;
	static int c;
	
	
	public static void main(String[] args) {
		MyScanner in = new MyScanner();
		
		l = in.nextInt();
		r = in.nextInt();
		c = in.nextInt();
		
		cube = new char[l][r][c];
		
		while(l+r+c != 0)
		{
			State start = null;
			
			for(int i = 0; i < l; i++)
			{
				for(int j = 0; j < r; j++)
				{
					String row = in.nextLine();
					for(int k = 0; k < c; k++)
					{
						cube[i][j][k] = row.charAt(k);
						if(cube[i][j][k] == 'S')
							start = new State(i,j,k);
					}
				}
				in.nextLine();
			}
		}
		
		solve(start);
		
		l = in.nextInt();
		r = in.nextInt();
		c = in.nextInt();
		cube = new char[l][r][c];

	}
	
	
	
	
	/** BFS Skeleton.
	 * Assumes that 'State' implements equals() and hashCode()
	 * according to contract.
	 * State must also provide 'isfinal', and 'successors' methods
	 */
	void solve(State start) {
	    Set<State> visited = new HashSet<State>();                  
	    // has this state been visited?
	    Map<State, State> pred = new HashMap<State, State>();       
	    // predecessor on the shortest path to the start state
	    Map<State, Integer> dist = new HashMap<State, Integer>();   
	    // shortest distance to start state
	    Deque<State> bfs = new ArrayDeque<State>();  // BFS queue
	    bfs.offer(start);
	    dist.put(start, 0);
	    
	    boolean reached = false; //=========ADDED4DMASTER==========
	    int min = Integer.MAX_VALUE; //=========ADDED4DMASTER==========

	    while (bfs.size() > 0) {
	        State s = bfs.poll();
	        int n = dist.get(s);
	        visited.add(s);

	        if (s.isfinal()) {
	        	
	        	if(n < min) //=========ADDED4DMASTER==========
	        	{
	        		min = n;
	        	}
	        	reached = true; //=========ADDED4DMASTER==========
	        	break; //=========ADDED4DMASTER==========
	        }

	        for (State succ : s.successors()) {
	            if (visited.contains(succ))
	                continue;

	            if (!pred.containsKey(succ))
	                pred.put(succ, s);

	            if (!dist.containsKey(succ)) {
	                dist.put(succ, n+1);
	                bfs.offer(succ);
	            }
	        }
	    }
	    
	    if(reached) //=========ADDED4DMASTER==========
	    {
	    	System.out.println("Escaped in "+min+" minute(s).");
	    }
	    else
	    {
	    	System.out.println("Trapped!");
	    }
	}
	
	// -----------Pair class for comparisons-------------
	public static class Pair implements Comparable<Pair> {
	    int x, y;
	    Pair(int x, int y) {
	        this.x = x;
	        this.y = y;
	    }
	    @Override
	    public int compareTo(Pair o)
	    {
	    	return Integer.compare(this.x, o.x);
	    }
	    @Override
	    public boolean equals(Object o) {
	        Pair p = (Pair)o;
	        return this.x == p.x && this.y == p.y;
	    }
	    @Override
	    public int hashCode() {
	        return x ^ y;
	    }
	}
	// -------------------------------------------------
	
	
	

	// -----------MyScanner class for faster input----------
	public static class MyScanner {
		BufferedReader br;
		StringTokenizer st;

		public MyScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}

	}
	// --------------------------------------------------------
}
