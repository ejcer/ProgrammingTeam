import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.TreeMap;

import Utilities.IO_Template.MyScanner;


public class CF259_Little_Pony_and_Sort_By_Shift {
	public static void main(String[] args) {
		MyScanner in = new MyScanner();
		
		int n = in.nextInt();
		
		int[] seq = new int[n];
		
		
		
		for(int i = 0; i < n; i++)
		{
			seq[i] = in.nextInt();
		}
		
		//hold the last number to be checked later on to find out how many times the sort worked
		int oriLast = seq[n-1];
		
		//add all the numbers and their positions to a list that corresponds to both, and then sort them
		//based on the value of the sequence number, not the value of the position key
		Map<Integer,Integer> shiftMap = new TreeMap<Integer, Integer>();
		for(int i = 0; i < n; i++)
		{
			shiftMap.put(seq[i], i);
		}
		
		
		//iterate through them and count how many times the sequence's position var's are out of order
		//if the position var's are out of order more than once, then the sequence didn't sort correct
		
		
		
		//List<String> keys = new ArrayList<String>(map.keySet());
		List<Integer> keys = new ArrayList<Integer>(shiftMap.keySet());
		
		
		int lastPos = shiftMap.get(oriLast);
		int cntLast = 0;
		
		int cnt = 0;
		for(int i = 1; i < n; i++)
		{
			int prevPos = shiftMap.get(keys.get(i-1));
			int curPos = shiftMap.get(keys.get(i));
			
			if(lastPos == curPos)
			{
				cntLast = i;
			}
			
			if(curPos-1 != prevPos)
			{
				cnt++;
			}
		}
		
		
		
		if(cnt > 1)
		{
			System.out.println("-1");
		}
		else
		{
			System.out.println(cntLast);
		}
			
		
		
//		System.out.println("");
//		for(int z = 0; z < n; z++)
//		{
//			System.out.print(keys.get(z));
//		}
//		System.out.println("");
//		for(int k = 0; k < n; k++)
//		{
//			System.out.print(shiftMap.get(keys.get(k)));
//		}
//		System.out.println("");
		

	}

	// -----------MyScanner class for faster input----------
	public static class MyScanner {
		BufferedReader br;
		StringTokenizer st;

		public MyScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}

	}
	// --------------------------------------------------------
}
