import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;



public class Combination_Lock {
	public static void main(String[] args) {
		MyScanner in = new MyScanner();

		int n = in.nextInt();
		int t1 = in.nextInt();
		int t2 = in.nextInt();
		int t3 = in.nextInt();
		
		
		while(n != 0 || t1 != 0 || t2 != 0 || t3 != 0)
		{
			int ans = 0;
			
			//////
			int total = n*4-1;
			if(t2 > t1)
				total += (t2-t1)
			else
				total += n - (t1 - t2)
			if(t3 < t2)
				total += (t2-t3)
			else
				total += 
			/////
			
			ans += n*3-1; //starting from one tick ahead of t1, 2 revs clockwise and then a slightly smaller rev to t1 clockwise
			ans += n+t1+n-t2; //going one full rev back to t1, then going to t2 counterclockwise
			ans += n-t2+t3; // going to t3 from t2 clockwise.
			
			System.out.println("" + ans);
			//wat
			n = in.nextInt();
			t1 = in.nextInt();
			t2 = in.nextInt();
			t3 = in.nextInt();
		}
	}

	// -----------MyScanner class for faster input----------
	public static class MyScanner {
		BufferedReader br;
		StringTokenizer st;

		public MyScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}

	}
	// --------------------------------------------------------
}
