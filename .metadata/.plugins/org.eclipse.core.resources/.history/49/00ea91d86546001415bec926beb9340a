import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;

import org.omg.PortableServer.POAManagerPackage.State;

import Utilities.IO_Template.MyScanner;


/**
 * vjudge.com 
 * TeamRound 2
 * Division 2
 * Problem C
 * @author Edward McEnrue
 */
public class Dungeon_Master {
	
	static char[][][] cube;
	static int l;
	static int r;
	static int c;
	
	
	public static void main(String[] args) {
		MyScanner in = new MyScanner();
		
		l = in.nextInt();
		r = in.nextInt();
		c = in.nextInt();
		
		cube = new char[l][r][c];
		
		while(l+r+c != 0)
		{
			State start = null;
			
			for(int i = 0; i < l; i++)
			{
				for(int j = 0; j < r; j++)
				{
					String row = in.nextLine();
					for(int k = 0; k < c; k++)
					{
						cube[i][j][k] = row.charAt(k);
						if(cube[i][j][k] == 'S')
							start = new State(i,j,k);
					}
				}
				in.nextLine();
			}
		}
		
		solve(start);
		
		l = in.nextInt();
		r = in.nextInt();
		c = in.nextInt();
		cube = new char[l][r][c];

	}
	
	
	
	
	
	

	// -----------MyScanner class for faster input----------
	public static class MyScanner {
		BufferedReader br;
		StringTokenizer st;

		public MyScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}

	}
	// --------------------------------------------------------
}
