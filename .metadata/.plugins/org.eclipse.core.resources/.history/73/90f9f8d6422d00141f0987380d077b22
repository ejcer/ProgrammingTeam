import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.StringTokenizer;


/**
 * Codeforces.com 
 * Round WarmUp
 * Division 2
 * Problem C
 * @author Edward McEnrue
 */
public class CFTeamWarmUp_GPS_Routing_Small {

//	/**
//	 * 
//	 * @author emcenrue
//	 */
//	static class Graph
//	{
//		HashMap<String, Vert> graph = new HashMap<String, Vert>();
//	} useless class is useless
	
	/**
	 * A vertex with a town name and position coordinates.
	 * @author emcenrue
	 */
	static class Vert
	{
		int x;
		int y;
		String name;
		ArrayList<Edge> neighbors = new ArrayList<Edge>();
		
		Vert(String name, int x, int y)
		{
			this.x = x;
			this.y = y;
			this.name = name;
		}
		
		public void addNeighbor(Edge neighbor)
		{
			neighbors.add(neighbor);
		}
		
	}
	
	/**
	 * An edge with a destination town and the edge's weight.
	 * @author emcenrue
	 */
	static class Edge
	{
		String destTown;
		
		int weight;
		
		Edge(String from, String to, int weight)
		{
			this.destTown = to;
			this.weight = weight;
		}
	}
	
	public static void main(String[] args) {
		MyScanner in = new MyScanner();

		int n = in.nextInt(); // nTowns
		int m = in.nextInt(); // mRoads
		int q = in.nextInt(); // qQueries
		
		HashMap<String, Vert> townMap = new HashMap<String, Vert>();
		
		//Adds all the towns to the hashmap
		for(int i = 0; i < n; i++)
		{
			String townName = in.next();
			int x = in.nextInt();
			int y = in.nextInt();
			
			Vert town = new Vert(townName, x, y);
			
			townMap.put(townName, town);
		}
		
	}
	

	// -----------MyScanner class for faster input----------
	public static class MyScanner {
		BufferedReader br;
		StringTokenizer st;

		public MyScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}

	}
	// --------------------------------------------------------
}
