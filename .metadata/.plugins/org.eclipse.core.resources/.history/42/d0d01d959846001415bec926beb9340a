import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;



/**
 * Kattis
 * Round 5
 * Division 2
 * Problem D
 * @author Edward McEnrue
 */
public class Flip_Five {

	static char[][] curFB; // current flip board
	
	public static void main(String[] args) {
		MyScanner in = new MyScanner();

		int n = in.nextInt();
		for(int z = 0; z < n; z++)
		{
			curFB = new char[3][3];
			for(int i = 0; i < 3; i++)
			{
				String row = in.nextLine();
				for(int j = 0; j < 3; j++)
				{
					curFB[i][j] = row.charAt(j);
				}
			}
			
			State start = null;
		}
		
	}
	
	
	/** BFS Skeleton.
	 * Assumes that 'State' implements equals() and hashCode()
	 * according to contract.
	 * State must also provide 'isFinal', and 'successors' methods
	 * 
	 * NOTES--------------------------------------------------------------
	 * Using a FIFO queue, BFS queues up a node, searches all of that nodes 
	 * neighbors (queuing them up subsequently), and then removes the first 
	 * node from the queue. Rinse wash repeat for the next node in the queue.
	 * 
	 * Based on the above description, BFS will traverse a graph based on
	 * the distance from the start node, so it will visit all nodes
	 * distance 1 from the start node, then distance 2, then 3, etc.
	 * Therefore, by going backwards in the queue from the destination node
	 * you can reconstruct the shortest path back to the start.
	 * 
	 * BFS acquires the shortest path in an unweighted graph.
	 * -------------------------------------------------------------------
	 */
	void solve(State start) {
	    Set<State> visited = new HashSet<State>();                  
	    // has this state been visited?
	    Map<State, State> pred = new HashMap<State, State>();       
	    // predecessor on the shortest path to the start state
	    Map<State, Integer> dist = new HashMap<State, Integer>();   
	    // shortest distance to start state
	    Deque<State> bfs = new ArrayDeque<State>();  // BFS queue
	    bfs.offer(start);
	    dist.put(start, 0);
	    
	    boolean reached = false; //=========ADDED4DMASTER==========
	    int min = Integer.MAX_VALUE; //=========ADDED4DMASTER==========

	    while (bfs.size() > 0) {
	        State s = bfs.poll();
	        int n = dist.get(s);
	        visited.add(s);

	        if (s.isFinal()) {
	        	
	        	if(n < min) //=========ADDED4DMASTER==========
	        	{
	        		min = n;
	        	}
	        	reached = true; //=========ADDED4DMASTER==========
	        	break; //=========ADDED4DMASTER==========
	        }

	        for (State succ : s.successors()) {
	            if (visited.contains(succ))
	                continue;

	            if (!pred.containsKey(succ)) //this is why you need hashcode
	                pred.put(succ, s);

	            if (!dist.containsKey(succ)) {
	                dist.put(succ, n+1);
	                bfs.offer(succ);
	            }
	        }
	    }
	    
	    if(reached) //=========ADDED4DMASTER==========
	    {
	    	System.out.println("Escaped in "+min+" minute(s).");
	    }
	    else
	    {
	    	System.out.println("Trapped!");
	    }
	}
	
	
	/**
	 * NOTES-------------------------------------------------
	 * successors() are all the next possible states of the 3x3 flipboard
	 * 
	 * State is actually another name for a node.
	 * 
	 * ------------------------------------------------------
	 * @author emcenrue
	 * must implement equals(), hashCode(), ifFinal(), and successors()
	 */
	public static class State
	{
		char[][] flipBoard = new char[3][3];
		
		public State(char[][] fb)
		{
			this.flipBoard = fb;
		}
		
		@Override
		public boolean equals(Object o)
		{
			State s = (State)o;
			for(int i = 0; i < 3; i++)
			{
				for(int j = 0; j < 3; j++)
				{
					if(flipBoard[i][j] != s.flipBoard[i][j])
						return false;
				}
			}
			return true;
		}
		
		public List<State> successors()
		{
			List<State> list = new ArrayList<State>(); //adjacent nodes list
			
			if()
			
		}
		
		public boolean isFinal()
		{
			return cube[level][x][y] == 'E';
		}
		
		//I don't understand this but
		// guaranteed a unique hash code for each state
        // b/c max of 30 for each l, x, and y
		public int hashCode()
		{
			return 900 * l + 30 * x + y;
		}
	}

	// -----------MyScanner class for faster input----------
	public static class MyScanner {
		BufferedReader br;
		StringTokenizer st;

		public MyScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}

	}
	// --------------------------------------------------------
}
