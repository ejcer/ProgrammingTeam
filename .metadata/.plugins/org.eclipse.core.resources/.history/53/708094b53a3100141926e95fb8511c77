

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

import Utilities.Main;


public class VJ1_First_Composed_Then_Transposed {

	public static void main(String[] args) {
		new Main().run();
	}

	// Since we're no longer working in static context, we can use class
	// variables! However, be very careful not to re-use these between problem
	// instances.
	//int a, b;
	
	HashMap<String, Integer> mScale = new HashMap<String, Integer>();
	HashMap<Integer, String> revScale = new HashMap<Integer, String>();
	

	public void run() {

		// Scanner reads input
		Scanner in = new Scanner(System.in);
		
		mScale.put("Ab", 12);
		mScale.put("A", 1); //
		mScale.put("A#", 2); //
		mScale.put("Bb", 2);
		mScale.put("B", 3); //
		mScale.put("B#", 4);
		mScale.put("Cb", 3);
		mScale.put("C", 4); //
		mScale.put("C#", 5); //
		mScale.put("Db", 5);
		mScale.put("D", 6); // 
		mScale.put("D#", 7); //
		mScale.put("Eb", 7);
		mScale.put("E", 8); //
		mScale.put("E#", 9);
		mScale.put("Fb", 8);
		mScale.put("F", 9); // 
		mScale.put("F#", 10); //
		mScale.put("Gb", 10);
		mScale.put("G", 11); // 
		mScale.put("G#", 12); //
		
		
		for (String key : mScale.keySet()){
		    revScale.put(mScale.get(key), key);
		}
		
		// Main loop
		while (true) {

			ArrayList<Integer> sheet = new ArrayList<Integer>();
			
			String note = in.next();
			
			while(!isNumeric(note) && !note.equals("***"))
			{
				sheet.add(mScale.get(note));
			}
			if(isNumeric(note))
			{
				int scale = Integer.parseInt(note);
				scale = scale%12; //does not work for negatives
				
				for(int sNote:sheet)
				{
					sNote += scale;
					sNote = sNote%12;
				}
			}
			else
			{
				break;
			}
		}

	}
	
	public static boolean isNumeric(String str)  
	{  
	  try  
	  {  
	    double d = Double.parseDouble(str);  
	  }  
	  catch(NumberFormatException nfe)  
	  {  
	    return false;  
	  }  
	  return true;  
	}
}
