import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.StringTokenizer;


/**
 * PC^2
 * Round 6
 * Division 2
 * Problem H
 * @author Edward McEnrue
 */
public class Sort_Me {

	static class Sort implements Comparator<String>
	{

		char[] order;
		
		public Sort(char[] alpha)
		{
			this.order = alpha;
		}
		
		@Override
		public int compare(String arg0, String arg1) {
			// TODO Auto-generated method stub
			return 0;
		}
		
	}
	
	public static void main(String[] args) {
		MyScanner in = new MyScanner();

		int n = in.nextInt();
		int year = 0;
		while(n!=0)
		{
			final char[] alpha = in.next().toCharArray();
			
			ArrayList<String> words = new ArrayList<String>();
			for(int i = 0; i < n; i++)
			{
				String s = in.nextLine();
				words.add(s);
			}
			
			Collections.sort(words, new Comparator<String>() {
				@Override
				public int compare(String s1, String s2) {
					if(s1.equals(s2))
						return 0;
					if(s1.length() < s2.length())
					{
						if(s1.equals(s2.substring(0, s1.length())))
							return 1;
					}
					
					
					int maxLen = Math.max(s1.length(), s2.length());
					
					for(int j = 0; j < maxLen; j++)
					{
						int s1CharPos = 0;
						int s2CharPos = 0;
						for(int k = 0; k < alpha.length; k++)
						{
							if(s1.charAt(j) == alpha[k])
								s1CharPos = k;
							if(s2.charAt(j) == alpha[k])
								s2CharPos = k;
						}
						if(s1CharPos < s2CharPos)
							return -1;
						else
							return 1;
					}
					return 0;
				}
			});
			
			System.out.println("year "+year);
			year++;
			
			for(int k = 0; k < words.size(); k++)
			{
				System.out.println(words.get(k));
			}
			
			n = in.nextInt();
		}
		
		
		
	}

	// -----------MyScanner class for faster input----------
	public static class MyScanner {
		BufferedReader br;
		StringTokenizer st;

		public MyScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}

	}
	// --------------------------------------------------------
}
