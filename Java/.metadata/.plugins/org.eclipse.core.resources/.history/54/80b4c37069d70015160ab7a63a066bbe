import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;




public class PhoneNumberWords {
	
	static String[] mapping = new String[] {
	    "",
	    "",
	    "abc",
	    "def",
	    "ghi",
	    "jkl",
	    "mno",
	    "prqs",
	    "tuv",
	    "wxyz",
	};
	
	public static void main(String[] args) {
		MyScanner in = new MyScanner();
		
		int num = in.nextInt();
		
		ArrayList<Integer> numbers = new ArrayList<Integer>();
		while(num != 0){
			numbers.add(num%10);
			num /=10;
		}
		Collections.sort(numbers);
		

		int[] indices = new int[numbers.size()];
		
		StringBuilder sb = new StringBuilder();
		
		
		for(int i = 0; i < mapping[numbers.get(i)].length(); i++){
			
		}
		
		for(int i = numbers.size()-1; i >= 0; i--){
			indices[i]++;
		}
		
		for(int i = 0; i < numbers.size(); i++){
			sb.append(mapping[numbers.get(i)].charAt(indices[i]));
		}
		System.out.println(sb.toString());
	}
	
	public static void solve(LinkedList<Character> word, ArrayList<Integer> numbers, int[] indices, int curNum, int curIndex){
		for(int i = 0; i < numbers.size(); i++){
			word.addLast(mapping[numbers.get(i)].charAt(indices[i]));
		}
		System.out.println(word.toString());
		word.pollLast();
		indices[curIndex]++;
		solve(word, numbers, )
	}
	
	public static void printLinkedList(LinkedList<Integer> word){
		for(int i:word){
			System.out.print(i);
		}
		System.out.println("");
	}

	// -----------MyScanner class for faster input----------
	public static class MyScanner {
		BufferedReader br;
		StringTokenizer st;
		public MyScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}

	}
	// --------------------------------------------------------
}
